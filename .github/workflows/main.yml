# This is a basic workflow to help you get started with Actions

name: "Arduino Build Test"

# Controls when the action will run. Triggers the workflow on push or pull request events
on: [ push, pull_request ]

jobs:
  build:
    name: Test compile for ${{ matrix.arduino-boards-fqbn }} with ${{ matrix.log-options }} ${{ matrix.other-options }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        arduino-boards-fqbn: 
          - arduino:avr:mega
          #- arduino:avr:leonardo
          #- arduino:avr:nano
        log-options: [-DDEBUG -DINFO]
        other-options: [-DTEST -DDUMMY]
        #ccov-options: [-fprofile-arcs -ftest-coverage -lgcov] #--> this result in compile error, memory usage too big
        ccov-options: [-ftest-coverage -lgcov -O0]
        include-paths: [-I/github/home/.arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/ -I/github/home/.arduino15/packages/arduino/hardware/avr/1.8.3/variants/standard/ -I/github/home/Arduino/libraries/ -I./src/]
        #include-paths: [-I/github/home/.arduino15/packages/arduino/hardware/avr/1.8.3/cores/arduino/ -I/github/home/Arduino/libraries/ -I./src/]
        example-path: [./examples/dBuLevel]
        build-path: [./build]
        os: [ubuntu-latest]

    env:
      OS: ${{ matrix.os }}
      PYTHON: '3.8'

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Checkout LiquidCrystal_I2C library
      uses: actions/checkout@master
      with:
        repository: johnrickman/LiquidCrystal_I2C
        #repository: fdebrabander/Arduino-LiquidCrystal-I2C-library
        ref: master
        path: CustomLiquidCrystal_I2C

    - name: Setup Python
      uses: actions/setup-python@master
      with:
        python-version: 3.8

    #- name: Install gcovr
    #  run: pip install gcovr

    - name: Create build directory
      run: mkdir ${{ matrix.build-path }}

    - name: Compile
      uses: ArminJo/arduino-test-compile@master
      with:
        arduino-board-fqbn: ${{ matrix.arduino-boards-fqbn }}
        build-properties: '{ "All": "${{ matrix.log-options }} ${{ matrix.other-options }} ${{ matrix.ccov-options }}" }'
        set-build-path: ${{ matrix.build-path }}

    #---------Need to find out about this section--------
    #- name: Generate code coverage
    #  run: |
    #    cp ${{ matrix.example-path }}.ino ${{ matrix.example-path }}.cpp
    #    g++ ${{ matrix.ccov-options }} ${{ matrix.include-paths }} ${{ matrix.example-path }}.cpp -o program
    #    ./program

    #- name: Invoke gcovr
    #  run: gcovr -r .

    #- name: Send unit tests coverage to Codecov
    #  uses: codecov/codecov-action@master
    #  with:
    #    token: ${{secrets.CODECOV_TOKEN}}
    #    file: ./coverage_unit.txt
    #    flags: unit
    #--------------end of code coverage----------------

    #- name: Setup Python
    #  uses: actions/setup-python@master
    #  with:
    #    python-version: 3.8

    #- name: Generate coverage report
    #  run: |
    #    pip install pytest
    #    pip install pytest-cov
    #    pytest --cov=./ --cov-report=xml

    #- name: Upload coverage to Codecov
    #  uses: codecov/codecov-action@v1
    #  with:        
    #    file: ./coverage.xml
    #    files: ./coverage1.xml,./coverage2.xml
    #    directory: ./coverage/reports/
    #    flags: unittests
    #    env_vars: OS,PYTHON
    #    name: codecov-umbrella
    #    fail_ci_if_error: true
    #    path_to_write_report: ./coverage/codecov_report.gz

    #- name: Run gcov --> gcov not found
    #  run: |
    #    chmod +x ./get_code_cov.sh
    #    ./get_code_cov.sh

    - name: Codecov Bash Uploader
      run: bash <(curl -s https://codecov.io/bash) -t ${{ Secrets.CODECOV_TOKEN }}
